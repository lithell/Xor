VjJ4b2EyUnNiM2RpU0ZKVllsUnNhRlpxUWxwa01XdDZZa1Z3VDJFeWVFTlpNR1JMVWtkR1ZsTlVUbFJXZWtaeVdWVmtTMWRHV2xoaVJrSm9WbFZhZDFacldtdFdNREZJVW14b1QxTkhlRXRaVm1ocllteE9XRTVWT1dsU01EVXhWakl4TkdGdFJsWmhla3BVVmxVMVRGVlhlRk5TYlZGNVlrVXhVazFGV25kWFdIQlBWVEpHU0ZWcmFGZFdNbmhSV1ZaV1IyTkdXbk5oUlU1b1RWZDRXbFpYTlVOaFYwcFlWRzVDVlZKVk5VTlpWbHB5WlZkR1NHVkdjRmhTYTI5NFZqRmFhbVZIU2taaVNFWnBUVzFTUzFsVVNtOVRWazVXVm0xR2JGWnVRbGxXYkdSelZGWkZkMUp1UW1GU2VrWllXbFprVG1WWFNrbFhiV3hvVmxkemVWVXhWazlUTURGeVRWWlNUMU5IVWt0WlZtaHJZbXhPV0U1VlRteFdNR3cxVmtjeE5HRnJNSGROV0VKVlRXMTRRMWxXWkV0WFJscHhVVzFvVjJWc1NURldNVkpMVGtkT1IyTkdhRTlXUlVwTFdWWm9hMkpzVGxoT1ZrNVBWakExU1Zac1pITlZSMFpXVW01Q1dtSlVSa2hVVldSSFYxWmtkR1ZGY0doWFIxSjFWVEZqZUU1SFVuTmlNMnhRVjBVMWIxWnVjRmRsVms1WVkwaGFZVTFIZURCWlZWSkRZVEZPUmxOcVdsVk5iWE13V2tjeFQyUkdTbkZVYXpGcFZqRktNMWRyVm10aU1ERlhZa2hXVjJKdVFtaFdNRlozWTFac2NWTlVSazVTYmtKWlZHeFNRMVJYU2xaT1ZFcGFZa1V3TVZsNlNrZFhWbFowVDFkR1YwMHlhRFpYYkZaT1RsWk9WMkpHYUZWaWEzQnZWbTV3VjFOV2NFZGFTRTVvVFZoQ1ZWUXhhRk5YYkdSR1RraGtXR0pIYUV0YVJ6RkhWMFpTZFZkdGJHbGhla1Y1VjFkNGExWXdNVWhTYkdoUFUwZDRUbGx0ZEV0TlZtUjFZa1Z3YWsxSGVFVlZNalZQWVVaYU5sWnViRlJXTTBJeVYycENjMlJIUmtWUmJYUlVVbFZ2TWxaRVNuSk9SMUowVW10b1drMHhTbUZXTUZaTFpERlNTRTFFUm1sU01VcEZWREZrTUZkc1pFZFRiVGxWVWtWc05GUlZWWGhqUlRWWVQxZEdiRlpYZURaVk1WWlBVekpLU0ZacmFGZFdNbmhSV1ZaV1IyTkdXbkpoUlhST1ZtNUNWVlV4YUU5VGJFVjNZMFJPV2sxcVJsaGFSV1JIVjFaYWRWVnJjR2hpVkd4MVZURmplRmxYUmtoVGEyeFZZbGhvUzFsdGNFTmxiRVY1WWtWT1QwMUhlREJYYTJSdllWWlplRlp1UWxWTmJYaERXVlphYTJSV1duVlViSEJXVFVkNE5sVXhWazlUTWxaelkwWnNWR0ZyY0doV01GWnpZMFpSZVdKRlNtaFdiSEJJVlRGa2MxUldSWGRTYmtKYVpXczFWRmxWWkZOVFJscFlZa1pDYUZaVlduZFdWM1JyVmpBeFIyTkdhRlZoYTBwb1ZtcEdSMk5HVWtaVWEwcG9WbTEwTlZsVlpEUlhiR1JIVTJwR1dGWnRUalJaYTFaelkxZEplVnBGY0doTmJXaEtWVEZXVjFsWFZsZGpSbWhYVmpKNFRsVlVRa2RqUm5CSVRWWmtiRll3TVRWWmEyaGhZVmRHVm1GNlNsUldWVFZNVkZkemVGWkZOVWxhUlhCb1YwZFNkVlV4WXpGUk1sWllVMWhzVldKWWFIRlVWRUY0WTBaUmVXSkZTbWhXTVZveFZtMDFUMWRzVlhkaVNIQlVWbFUxVEZSVlpGZFhWa1owWlVWd2FHSlViSFZWTVdOM1RWZEdTRlZyYUdsU1JYQm9WbFJDYzJWc1RsWlVhM1JxVFd0c05WZHJhR0ZoVmtsNVpVUkdXbGRIZUV0VWJYUnpVa1pPZEU5WGRGUlNhMjk2VjFST2QyUnRVbkprTTNCVVlsZG9jbHBXVWxka1ZteFhZVVpPYVUxc1NsbFZNbkJIWVdzeGMxZHFWbGhXUldzeFdrWmtVMU5HV25WV2JYUlNaV3hhZUZkWGNFcGtNbEowVTJ0b2FWSkZTbTlWYWtaaFpXeHNjbUZITld0aVJUVkpWVzB4ZDJGRk1YUmxSRVpXWVdzMVdGa3dXbmRUUmxwWlYyMXNWMDFHYnpKWGExWnJWakpXVm1RemJHbFNNMEp3VkZkd1YwNXNVa1ZVYm1ST1ZqQndTbFpzYUZkaGJFbzJWbTVXVkZZeWQzcFhha0p6WkVkV1NWRnRiR2xYUlRWM1ZrUktjMUZ0UmxoU2EyeFdZV3RLY1ZVd1ZYZE5iRkpKWVhwV2JGWnRlRnBYVkU1WFdWVXhkR1F6WkZwV1YyaFlXVlprVTFkV1VuUmxSM0JwVmxSVmVWZFhNREZWTWtwSVUyNVdWbGRHV21GVVYzQnpUVVpTUlZOcVVtcFNNVXBKV1ZWa05HRldTWHBhZWtKVlVrVktkbGxWV25KbFYxSkpVVzFzYUUxc1JqUlhWbHByVlRKS1JtUXpiRTVXTW1oeFZGUkdTMk14YTNsaGVsWm9UVmQ0V2xaWE1XOVVWVEZ4VW01a1dtVnJjRTlhUm1SSFUwWnJlV0pGTVZKTlJWcDNWako0YjJJeVNrWmlTRVpwVFcxU1MxbHJXa3RPVm5CSFdrWmFhRlpZYUVWVlZtUnpZV3hPUm1OSVRscGlSMUo2VkZaa1MxWkdUbFZYYTNCU1RVaENNRll4V210T1IxWnpZMFpTVkdGdGVFNVZWbU0xWW14d1dXSkZkR2xpUjNoWlZGWmtORk50Um5SUFZ6VlVWak5TVUZacldrcGtNRGxJWWtVeFVrMUZXbmRYV0hCTFZqSldXRlZ1VWxkaWJYaExXVmN3TldKc1RsaGtSV1JWVm14S1JWVXhhRTlUYkVWM1kwUmFZVkpYVWtoVVZWcDNWa1pPVlZkcmNGSk5TRUpZVjFjd2VGVXlTa2hWYTJoWFlsaENjbFZxUm1GamJFNVlZa1JPWVUxSGVEQldSekExV1ZaWmQxZFlaRnBpVkVaSVdrVmFkMVpHVGxWWGEzQlNUVWhDUzFaWE5YTlJNVWw1Vkc1U1YySllhRXRaVm1ocllteE9XRTVYUm1sU01EVXhWa2MxUTJGVk1YRlZia0pWVFcxNFExbFdaRk5qVmtwWlZtczFVazFIZURaVk1WWlBVekpSZVZSdVVsQldNMEpvVmpCVk1VNXNUbGhqU0ZwaFRVZDRNRlpITlhkWlZURnhZVWhDVlZKVk5VTlpWbVJUVTFkS1NWcEhSbFpOUjNONVZURldUMU15VWxkaVJteFdZbXRLY2xsc1dsZGpSbEpHVkd0S2FGWXdjRWxVTVdNeFlWVXhkV0ZJWkZwaVZFWTJXVlpWTldOR1JsaGlSMmhVVW10c00xZFVRbTlVYXpWeVpVUldVRmRIZUdGV01HUlBUVlprY1ZOdVRrNVNNRnBLVm0weGMyRXhaRVpPV0U1YVRXcEdVRnBITVV0a1ZsWjBaVWRzYVdKRldYaFdNVkpLVGxkU1JtUXpiR3hUUlVweVZXcEtiMk14YkhKYVJGSlBVbGhrTTFsVlpHOVhhekYxVlc1a1dtSllVbkpVVm1SSFYwWldkR1ZGTVU1aGExcDJWMWh3VDFVeVNraFVia0pRVjBWS1lWUlhjSE5OVm10NllYcFdhR0pWTVRWWGEyaGhWRmRLY2xOcVJsaGliWGhMV1hwQ2MxSkdUblZVYldoWFpXeGFOVlV4Wkhka2JHOTNZa2hTYUZKRlNuSlZNRlpMVG14UmVXRjZVbXRpVlZwSlYxUk9VMWRzWkVaVGJtUlZVbnBCZUZsclpGTlNSVGxZWkVad1dGSnJjSFpXUlZKTFZESldjMkl6YkZCVFJscHZWV3BLVDJOR1VrWlVhMHBvVm01Q1dsbFZaRFJUYlVaMFQxYzFWRll6YUZSYVZtUlRWMFphV0dKRk1WSk5SVnAzVjFSQ2IxTXlTa2hUYkdocFVrVmFjRlpVUW5KTmJFNVdWR3QwYVZadGVGbGFWV2gzV1ZaVmQySjZWbFZTVlZveVYycEtWMDVXVG5ST1ZuQlhaV3RhZWxVeFpIZGtiRzkzWWtoS1ZXRXhXa3RaVm1ocllteE9XRTVWT1dsU01EVXhWakl4TkdGdFJsWmhla3BVVmxVMVRGVlhlRk5TYlZGNVlrVXhVazFGV25kWFdIQlBWVEpHU0ZWcmFGZFdNbmhSV1ZaV1IyTkdXbk5oUlU1b1RWZDRXbFpYTlVOaFYwcFlWRzVDVlZKVk5VTlpWbHB5WlZkR1NHVkdjRmhTYTI5NFZqRmFhbVZIU2taaVNFWnBUVzFTUzFsVVNtOVRWazVXVm0xR2JGWnVRbGxXYkdSelZGWkZkMUp1UW1GU2VrWllXbFprVG1WWFNrbFhiV3hvVmxkemVWVXhWazlUTURGeVRWWlNUMU5IVWt0WlZtaHJZbXhPV0U1VlRteFdNR3cxVmtjeE5HRnJNSGROV0VKVlRXMTRRMWxXV25KbFYxWkpVVzFHVjJWc1ZqTlZNV1J6VFRGdmQySklWbFpoYkZweFZXcEdWMk5HVVhsaVJVcG9WakJ3TUZWdGNFTmhSbVJIWTBoT1ZGWXlkM3BYYWtKelpFZFdTVmR0Ums1aGJYZzJWMVphYWsxWFRuSmlTRVpwVFcxU1MxbHNaRzVrTVhCR1lVVk9iR0Y2YkhkVU1HaGhZVzFLVmxkWWNGVlNla1p5V1RCa1UxTkhSa1ZTYkhCcFlrWnZNbFl5ZUc5VE1rWjBVMWhzVDFaRlNtaFdibkJXWkRGU1NFMVZPV3RpVlhCVlZERm9UMkZHWkVkVGJscFlZa2RSTUZsNlNsZFNSVGxXWWtad1YwMUVWalZYVmxwcVRWWk9TRlZzYUdsU00xSm9WbGh3YzAxR1pGZGhSVGxPVW01Q1dsVXhhR0ZoUmxsM1RsUktXbUpVVms5YVIzaHlaVlpXZEZkdGFGZE5SRlY1VjFjeGNrMVhVWGxUYmxKYVRXMTRUbFZVUWtkalJteHlXa2hPYTFZd1dURlZNVkpoVTJ4RmQyTklXbUZTVjJoVVdrUktUMDV0U1hwWGF6Rk9UVWhDZGxkcmFISk5WMHAwVW14c1ZtSlViSEpXYWtKMlpVWnNObE5zWkd4V2JYUTFWREZvVjJFeFNYaFhha1poVWxVd2VGbFhNVXBsVlRGSlYyMXNVMDF1WkROWFZsWnJWakpOZVZOcmJHRk5NWEJWVldwQ1lXTldiRlZUYms1clZtdHNObFp0TlVOWlZrbDRWbXBLV21KSFVraGFWekZUVTBaYWRXSkZNVTVpUlhCMlYydFdhMUp0VW5OaE0yeFdWMFphYjFWcVNrOWpSbEpHVkd0S2FGWnVRbHBaVldRMFUyMUdkRTlYTlZSV00yaFVXbFprVTFkR1dsaGlSVEZTVFVWYWQxZFVRbTlUTWtwSVUyeG9hVkpGV25CV1ZFSnlUV3hPVmxScmRHbFdiWGhaV2xWb2QxbFdWWGRpZWxaU1RXMVNNbFY2Um05VmJVNUZZWG93UFE9PQ==