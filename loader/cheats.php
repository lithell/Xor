VjJ4b2EyUnNiM2RpU0ZKVllsUnNhRlpxUWxwa01XdDZZa1Z3VDJFeWVFTlpNR1JMVWtkR1ZsTlVUbFJXZWtaeVdWVmtTMWRHV2xoaVJrSm9WbFZhZDFacVNURldNazE0WWtaU1ZGZEZOVXRWVkVKM1RteGtjMkZGZEU1aVNFSmFWVEZrYzFWSFJsWlNia0pYWVRGd1MxbFdWalJTUmtaWVlrZHdUazFWY0haWGExWnJWbTFHVms5WVFsSldNbmhZVm01d1YyTnNaSE5oUms1cFVtMTBObFpYTVRSWlZrVjNZa2h3VkZaVk5VeFpWekZIVTBaYWRHRkhkRk5sYkZwMlYxZDRhMVp0UmxaUFdFSlNWako0VlZWc1pFOWliRnAwVFZoT2EwMUhlSGRhUkVwclUyMUtjMk5JVGxwTmFsWlFXVEJrU21WVk5VaGlSa0pvVmxWYWQxZHJaSGRTYlZKV1RWVlNWRmRGTlV0VlZFSjNUVEZyZVUxRVZtaGlTRUphVmtjMWQxTnRSblJQVnpWVVZucFdNMVJXWkV0VFJrcFlZa1V4VWsxRlduZFhhMVp2WXpKUmVHTkdVbFJXUm5CTFZWUkNkMDFXWkZkaFJrNXFVakZLTUZac1pITlVWa1YzVW01Q1dtRXlUVEZaYlRGS1pWZFdTVkZ0YkdsWFJUVjNWa1JLYzFGdFJsaFNhMnhXWVd0S2NWVXdWWGROYkZKSllYcFdiRlp0ZUZwWFZFNVhXVlV4ZEdRelpGcFdWMmhZV1Zaa1UxZFdVblJsUjNCcFZsUlZlVmRYTURGVk1rcElVMjVXVmxkR1dtRlVWM0J6VFVaU1JWTnFVbXBTTVVwSldWVmtOR0ZXU1hwYWVrSlZVa1ZLZGxsVlduSmxWMUpKVVcxc2FFMXNSalJYVmxwclZUSktSbVF6YkU1V01taHhWRlJHUzJNeGEzbGhlbFpxVW0xME5WUXhhRmRoYlZaVllYcEtZVkp0VVRCVVZsWTBaRlpHZFZadFJteFdWM2cyVlRGV1QxTXlUWGxTYkdoUFYwVndTMWxYTURWaWJFNVlUVmM1VGxJeFNrcFZWelYzVlVkR1ZXRkVTbHBOYWtaSVZGUkNOR1JHY0VsUmJYUlRUVzFrTkZZeFl6RldNbFp6WTBac1ZHSllRbkJVVjNCV1pERmtjMWw2Ums1U1dHZ3dWa2MxWVdGV1ZqWmlTSEJhVm0xb1ZGbHFSbmRYUjFaSlZHMTRVbVZ0ZUV0V01WcHJWREpPZEZKc2FFOVdWMmh5Vm1wS05HTnNaSE5VVkZaclVtMTRXbFpIY0VOWlZtUkdZa1JLV0dFeVVraFVWVnB6VmtVNVdFOVhSazVOV0VJelYxUkNUazFWTVZoVldIQlhWako0VGxWVVFrZGpSbVJ6WVVjNWFWSlhlSGhaYWtwclUyMUtSMU5xVm1GU2JWSlhXVlpXTkZKR1JsaGlSM0JVVWxoQ2VsZFhlR3RqTURGWVUyeFNWRlpHY0V0VlZFSjJaREZyZVU1V1pHbFNWM2d4VkZWb1QxSkhSbFpUVkU1VVZucEdjbGxWWkV0WFJscFlZa1pDYUZaVlduZFdha2t4VmpKTmVHSkdVbFJYUlRWTFZWUkNkMDVzWkhOaFJYUk9Za2hDV2xVeFpITlZSMFpXVW01Q1YyRXhjRXRaVmxZMFVrWkdXR0pIY0U1TlZYQjJWMnRXYTFadFJsWlBXRUpTVmpKNFdGWnVjRmRqYkdSellVWk9hVkp0ZERaV1Z6RTBXVlpGZDJKSWNGUldWVFZNV1ZjeFIxTkdXblJoUjNSVFpXeGFkbGRYZUd0V2JVWldUMWhDVWxZeWVGVlZiR1JQWW14V2RFNVZkR2xTYmtKVlZURm9UMU5zUlhkaU0yeFlZa2RvVEZwWE1VZFhSVGxaVm10d2FHSlViSFZWTVdNeFYyMVdSbVZJUmxKV01uaE9WVlJDUjJOR2EzZGhSWFJyWWtkME5WWnROWGRoYlZaV1lYcEtWRlpWTlV4VWJURlRWMGRXU0dGRmNHaFhSMUoxVlRGak1WVXdOVmhVYTJoWFZqSjRVVmxXVmtkalJteDBUVlZrVGxJd1dscFdNakUwVTIxR1dWcEhOVlJXZWtVd1drZDRkbVZWT1ZsVWJXaFhaV3hhTlZVeFpIZGtiRzkzWWtoU2FGSkZTbkpWTUZaTFRteFJlV0Y2VW10aVZUVXdWVzF3VDFSWFNsaFZibVJoVWxkU2RsUldXbk5rVmxwMVkwZEdXRkpZUW5oWFYzQktUVlV4UjJOR2FFOVdSVXBPV1d4Vk1VMXNiSE5VVkZacVRXdGFXbFpYTURWWlZsbDZZVWh3WVZaVk1ERlZNVnB6VjBaU2RWTnRhRmRsYkZwS1YydGFhMk15UlhoalJsSlFWMFpLWVZZd1ZUQmtNV1J6WVVWd2EySlZXbGxXUnpWaFlWZEtjazFVU21GV2VsWllXWHBLVTFaRk5WbGFSMnhwVmpBMWQxWkZWazlSYlVaWVUydG9hVk5HV205YVZsWnlUV3hPVmxScmRHbE5iRXBLVmxjMWEyRnRWblJQVkVwVlVrVTFURmxWWkZOT1ZUVllUbGRvV0ZKcmNESlhhMXByVXpBeFdGUlliRmRpYlhoaFZGZHdjMDFXY0VaYVJtUnJWakZLUlZSc1pIZGhWVEZ4VVdwS1dtRXlVbnBVVldSSFUwWmFkVlJ0YkZSU01sRjVWbFJDYTFJeVJuUlNXR3hwVTBaYVZGUlVSbUZrTVdSeVdrWmFhMkpWY0ZsVmJUVjNZVEZKZUZkcVZsVlNSWEJVV1ZWa1UxTkdTbGxYYldoVFRXeEtNRmRVU1hoV01rcEdaVWhXVjJGck5YSldWRUp6Wld4T1ZsUnJkR2xTTVZwSlZteGtjMVZIUmxaU2JrSlhZVEpvVEZSV1duZFdSazVaVkd0d1VrMUlRWHBYVkVsNFZqSlNTRkpzYkZkaWJFcExXVmN3TldKc1RsaE5WMFpvVWpCd1NsWkhNVFJUYlVweFVXNXdVazF0ZUVSVWFrSnpaRVp3U0dGSGJGZE5WbHAzVmtSS2MxRnRSbGRTV0doVlZrWndWRlJWVW05alJsSkdWR3RLYUZZd01UVldiVFZ6WVRKS1YxZHFWbFJXTTBJeVYycENjMk14Vm5OVWEzQm9WMGRTZFZVeFl6RlVNREZIWWtac1ZtSllhRXRaVnpBMVlteE9XR1ZHWkd0TldFSkpWVzF3UTJGR1dqWldibFpVVmpKM2VsZHFRbk5rUmxKMFQxZEdWMDFHYkROWFZ6QjRVakpTUjJOR1VsUldSbkJMVlZSQ2QxTnNWblZpUlU1WFRXdGFXbFZXWkhOVVZrVjNVbTVDWVZKNlJsaGFWbVJPWlZkS1NWZHRiR2hXVjNONVZURldUMU13TVhKTlZsSlBVMGRTUzFsV2FHdGliRTVZVGxWT2JGWXdiRFZXUnpFMFlXc3dkMDFZUWxWTmJYaERXVlphY21Wc1VuUk9WMnhzVmxkNE5sVXhWazlUTURGSVZteHNVbUpZYUV0WlZ6QTFZbXhPV0UxRVJtaFNNVXBKV1d0U1MxbFdWWGRpU0hCVVZsVTFURmw2U2twbFZuQkpWMjFzVTAxdVozaFhWbWh6VTJzMWNtSkZVbFJpVkd4eVZUQmFTMDB4YTNwalNGcHJZVE5rTmxVeU1XOWhNbFpWVm01V1dsWnRhRlJaYWtwVFYwWk9jVkp0Y0U1aVJtOHhWakZTU2s1WFVsaFZhMmhYWW14YWNsVlljRmRqVm14eFUxaGthMkpWY0VsWmExSkRZVVpKZUZkdWNGcGhNbWgxV2tkNFQxTkdTblJqUjJoT1lsaG5lRlpYY0U5V01rNUhZMFZvVjFkR2NIQldha0poVG14d1JscEdaR3hXV0dRMVdXdGtkMkZWTVhGV2FscFZVa1Z3VUZwWGVIWmxWVGxKVm0xd1UyVnNXakZWTVdSelRURnZkMkpJVW14VFJVcHdXV3hvVDJOR1VYbGlSVXBvVmxob1ZWVXhhRTlUYkVWM1kwaE9ZVlpYVWxkWlZsVTFZMFpHV0dKR1pGUlNWemswVmpKNFQxTnRUWGRpUlZKVVltMVNjVmxzV21GTlJteFhZVVprYTFKWGVIaFpha3ByVTIxS2MxTnFWbUZTYlZKWFdWWmtZVlpIVVhka1JYQlVVMFUxZDFZeWNFdFNNbEpIWTBaU1ZGWkdjRXRWVkVKM1VsWmFXV05JWkZSU2JFa3hWVEZvVDFOc1JYZGpSRnBZWWtkb1RGUlhlSGRYVms1WVlrWkNhRlpWV25kV2JYUmhVMjFHVm1WRlVsSldNbmh4VkZSR1MySXhjRVphUmxwb1ZsUnNkMVZXWkhOV01XUkdVMjVLV0ZadGFGUlpNR1JMWkVacmVXSkZNVkpOUlZwM1ZqRlNTMkl5U2tkaVJteFdZbXhhWVZadWNFZGpNVTVZWTBoYVlVMUhlSGxaVlZadlUyeEtWMk5FVmxoaVIxSlhXVlpXTkZKR1JsaGlSM1JwVm14dk1WZFljRXRqTWxKMFUyNUNWRlpHY0V0VlZFSjJaVlpTVjFSVVFtdE5SM2gzV2tSS2ExTnRTbkpUYWxaYVlXdHdVRmxyWkU1bGJGSllZa1pDYUZaVlduZFdNVkpQVkRKS2RGTnFWbFJYUlRWTFZWUkNkbVF4Y0ZkaFJVNXBVbGQ0ZUZscVNtdFRiVXBWVm0wNVlWSlhVbnBVVjNoM1ZrWk9XVlJyY0ZKTlNFSTJWMWR3UzJFeVVuUlRhMmhwVTBaYWIxcFdWbkpOYkU1V1ZHdDBhVTFzU2twV1Z6VnJZVzFXZEU5VVNsVlNSVFZNV1ZWa1UwNVZOVmhPVjJoWVVtdHdNbGRyV210VE1ERllWRmhzVjJKdGVHRlVWM0J6VFZad1JscEdaR3RXTVVwRlZHeGtkMkZWTVhGUmFrcGFZVEpTZWxSVlpFZFRSbHAxVkcxc1ZGSXlVWGxXVkVKclVqSkdkRkpZYkdsVFJscFVWRlJHWVdReFpISmFSbHByWWxWd1dWVnROWGRoTVVsNFYycFdWVkpGY0hwWlZ6RktaVlUxV1dORk1VNWhlbFV5VmpKd1NrNUhVbGhVYTJoUFZucFdTMWxXYUd0aWJFNVlUVlJTYWxJd2NEQlpla3B6VlVkR1ZsSnVRbFZTYXpWTFdYcENjMUpHVG5SbFIzaFRUVlphZDFaRVNuTlJiVVpYVjJ0c1ZHRnJXbWhXVkVKelpXeE9WbFJyZEd0TmF6VXdWbTAxVTJGR1pFZFhha0pVVmpOQ01sZHFRbk5rUm1SMFlVZHNWRkpVVm5wVk1XTXdaREpOZDFSdVFsSmhiVkpMV1d4a1UySXhiSE5hUmxwb1ZsUnNkMVZXWkhOVmF6RkhVbTVDVlZKVk5VTlpWbVJPWlZaYWRXSkhkR2xXYkc4eFZURmtkMlJzYjNkaVNFcFRZWHBHVmxWVVFuTmxiRTVXVkd0MGJHSldTa2xWYlhCRFdWWlZkMkY2U2xSV1ZUVk1WbTB4VDFOR1ZuUmhSM1JUVFc1bmVGWXlOWE5UYlUxM1lrVlNWR0pZUW05VmFrWmhZakZ3UmxsNlJtaFNNSEJaVm14a2MxVkhSbFpTYmtKV1RVWmFjVmRxUmt0a1ZrNTBaVWRHVmsxSGVEWlZNVlpQVXpBeGMyTkdiRlJpYmtKdlZtNXdjMDFXVGxoalNGcGhUVWQ0TVZZeGFHOVVWMFp5VW01Q1ZWSlZOVU5aVm1SUFUxWk9kVmRzY0U1aVJtOHlWMVJPYzFOck5YSmlSVkpVWWxoQ2NGVnFTalJqTVd4MFRsWkthRlpZYUVWVlZtUnpZVEZPU0dWRVRsaGlSVFZMVkcxMGMxSkdUblZXYkhCWVVtdHdNMWRyWTNoV2JVWldaVVZTVWxZeWVIQlZibkJ6WkZac2NWTnFVbXBTTUhBd1dYcEtjMVZIUmxaU2JrSmFWbGRvVkZSVlpFOVRWbEpWVjJzeGJGWkhkekZXTVZwdllXMVNWMkl6YkdsU1JVcHZWVEJhWVdOR2NFZGhSVGxwVWpBMU1GWkhOV0ZoVjBwelUyNU9XbUpVVmxOYVJscHlaVlU1V1ZWck1VNWliV2d6VjJ0V2EySXlTa2hUYTJoc1VrWktUbFJWWkc5aU1XUlZVMnBDYWxJd2NIbFhhMUpIWVVaWmVGTnVUbFZTUld3MFdWVmtUbVZzVm5SbFIzQm9Wa2Q0TTFZeFVrcE9WMUpZVkdwV1VGWXpRbWhWYlhCelpERmtWVk5VVm10V1dHZ3hWVmMxVjFsWFZsWmlTSEJVVmxVMVRGbDZTa2RYUlRWWlUydHdhR0pVYkhWVk1XUnlaREpHVm1WRlVsSldNbmhvVmpCa2IyTXhUbGhqU0ZwaFRVZDRlbFpYTlhOaE1WbDRWbTVDVlZKVk5VTlpWbVJQVTFaT2RHVkhiRmROYm1RMFYxZDRUMU5yTlhKaVJWSlVZbFJHWVZacVRtOU9iR1J6Vkd0MFVGWllhRU5aYWtwcllrZFdWbU5JVmxoV2JVNDBXV3RXYzJOWFNYbGFSWEJvVFVSV1MxVXhaSE5OTVc5M1lraFdWV0pZYUhGWmJYaDNZekZyZVdKRmNFOWhNbmhGVlRKMFMxWldTWHBhU0VKVlVsVTFRMWxXWkU1bGJGWjBZVWQwVTAxV1duZFdSRXB6VVcxR1YxZHNiRkppV0ZKaFZqQmFTMlF4YkhSTlYzQm9WbGhvUlZWV1pITlhhekYwWVVoT1dGWnRhRlJhUmxwelYwVXhXR1ZGY0doaVZHeDFWVEZrTUdJeFRrWmlSVnBZWW0xNGFGWnFSbGRqUmxKR1ZHdEthRll4U2pCV2JUVnpZV3N4ZEdWRVNscGlWM2hMVkcxMGMxSkdUbkZUYXpWV1pXeEplbFV4WkhOTk1XOTNZa2hXVW1KdGVIQlVWM014WXpGc05sUnJOV2hXVkd4M1ZWWmtjMWRyTVhWaFNHUllZa2ROZUZSVlZuTmpSMUY1V2tWd2FXSkZhM2hYVkVKclZtMUdWazlZUWxKV01uaHdXV3hXV21ReGJGZGhSMFpwVWxkNGQxcEVTbXRUYlVwWllVUktXR0ZyYXpGWmVrcEhWMFUxV1ZOcmNHaGlWR3gxVlRGamVHSXdNVWhWYTJ4U1ltNUNVVmxXVW05TmJHdDVUVlZrVGsxSWFEQlhhMmhEWVRGSmVWb3phRmhXZWxaWVdsZDRkMWRXVG5SalIyeE9ZV3hXTTFZeWVHcE5WVEZHWlVoU1ZXSnNjSEJXV0hCelpXeHNWMkZHVG1sTldFSlpXbFZvVDJKR1JqWmlSWEJZVm0xU1VGa3lNVWRYUlRWV1lVZDBWMDF1YUhsV01uaE9UbGRTUjJKR2JGVmhhMHBvVmpCV2MwMXNiRmRhUlRscllsVndNVlpHYUdGWGF6QjVaVWhDV0dKSGFFeFpha3BUVjBVMVZWRnRSbGhTVjNkNFYxUkNhazFYU25KaVNFSnJUVzFTUzFsc2FHOWtNV3gwVFZod2FGWlViSGRWVm1SelZGWlZkMkpJY0ZSV1ZUVk1XV3RrVjFOR1dsaGlSa0pvVmxWYWQxWnRkRzlUTURGWFkwWlNWRmRGTlV0VlZFSjNUVEZyZVUxV1pHdFNNRnBhVm0wMVUxTnRSblJQVnpWVVZucEdhRmxWWkV0VFZsSjBaVVZ3YVdGclNqWlZWRXB6VVRBMGQySklVbUZTTW1od1ZtcEdWMk5HVVhsaVJVcG9WbXhhTUZReGFIZFRiVVpaV2tjMVZGWjZWbEJaYTJSUFpGWmtkR1ZIY0doV1YzTjVWVEZXVDFNeFJuTlZhMXByVFcxNFRsVlVRa2RqUm13MlZHeE9hRkl4U2tsV2JHUnpWVWRHVmxKdVFsZGlSMmhFV1ZSR2MxZFdWblZSYld4cFZqQTFkMVpGVms5UmJVWlhZVE5zYUZJemFHRldNRnBMVFZaa1Yxa3phR2xTVjNoNFdXcEthMU50UlhsaFJXeFVWbFphYUZwV1duZFhSbHBZWWtVeFVrMUZXbmRYYTJONFZqSldXRlJZYkdsVFJuQndXVlpXY2sxc1RsWlVhM1JPWVhwR1ZWUnJhR3RUYlVaWldrYzFWRlo2VmtSYVZtUktaVlpTZEdWSGNFNU5SRVozVmtSS2MxRnRSbGhVYmxKUVYwaENTMWxXYUd0aWJFNVlUbFpPVDFZd05VbFdiR1J6VlVkR1ZsSnVRbHBpVkVaSVZGVmtSMWRXWkhSbFJYQm9WMGRTZFZVeFkzaE9SMUp6WWpOc1VGZEZOVzlXYm5CWFpWWk9XR05JV21GTlIzZ3dXVlZTUTJFeFRrWlRhbHBWVFcxek1GcEhNVTlrUmtweFZHc3hhVll4U2pOWGExWnJZakF4VjJKSVZsZGlia0pvVmpCV2QyTldiSEZUVkVaT1VtNUNXVlJzVWtOVVYwcFdUbFJLV21KRk1ERlpla3BIVjFaV2RFOVhSbGROTW1nMlYyeFdUazVXVGxkaVJtaFZZbXR3YjFadWNGZFRWbkJIV2toT2FFMVlRbFZVTVdoVFYyeGtSazVJWkZoaVIyaExXa2N4UjFkR1VuVlhiV3hwWVhwRmVWZFVTWGRPVjFaeVpVaFdVbUpzV21oYVZsWnpaV3hPVmxScmRHcE5hMXBaVkd4b1MxTnRSblJQVnpWVVZqSjBNMWxXVmpSU1JrWllZa2RHV0ZJeWFIcFZNV1IzWkd4dmQySklUbFppYlhoeVZtcEdWMk5HVWtaVWEwcG9WakExU2xVeU1UUmhWbGw1WkROb1dtSkZOVXRVYlhSelVrWk9kRTFXY0ZkTk1tY3lWako0VDFNd09WWmxSVXBwVFcxU2MxcFdWbmRrVm1SWFdUTm9hVkpYZUhoWmFrcHJVMjFGZWxrelpGWmhNVXBMV1ZaV05GSkdSbGhpUjNCT1lrWnZNVmRyWTNoV01sWldZa2hHYVUxdFVrdFpWRUpoVkd4YVJsUnJjR3BOUjNoRlZUSTFkMkV4U1hkWFdHUllZa1UxUzFSdGRITlNSazV6VjIxd1UwMVZjSFpYYTFacll6SlNWMk5FVmxSWFJUVkxWVlJDZDJOV2JGWmFSbVJvVWpGS1NWUnNaRzloVmxsNFZtNUNWVTF0ZUVOWlZscFBVbXhyZVZwR1RtbGhNMEo2VmpKNFQxTnRUWGRpUlZKVVlXdHdhRll3Vm5kT2JHeFhXWHBXYTFaWGVIaFpha3ByVTIxS2MySkVVbFZTTTBKRFdWWldORkpHUmxoaVIzQlVVbGhCZVZZeFVrdFdNbFowVkdwV1ZGWkdjRXRWVkVKM1pXeFNjbHBHU214V1YzaDNXa1JLYTFOdFNuTlRWRVphVFVkU1YxbFdWVFZqUmtaWVlrZHNhVlpXYkROWFZscHZXVmRLUm1KSVFtdE5iVkpMV1d4b2IwMXNaSEZUVkZacVRXdGFXVlJzYUV0VGJVWjBUMWMxVkZaNlJuWlVWV1JUVTFaR2RXTkdRbWhXUjJkNVYxUkplRkl3TUhkbFNGSmhVMFZLY2xWcVNtNWxSbVJZVGxaa2JHSklRbHBWTWpGM1lWVXhjVlpZWkZoaVIwMTRWRlZXTkdSR1VuVlhiV3hXWlcxNE5sZFdXbTlWTWtsNFkwWm9iRk5GTlhOVldIQnpVMnhrVjFwRk9XcGlWVnBaVkd4V2IyRXhXWGxsU0VwWVlrVXdNVnBGV25OWFZsSnhVVzFHV0ZKWGQzbFhWbHByVkRKU2RGTnVWbFZYUm5Cd1ZXcEdZV1JHY0VaVmJFcHJWakExU1ZSc1l6RlRiVVpaV2tjMVZGWjZSVEJaTUdSTFpFZE5lV0pHUW1oV1ZWcDNWa1ZhVDFOdFRYZGlSVkpVWWxob2MxVnFSbGRqUmxGNVlrVkthRlpzY0VwVk1uQkhXVlpWZDJKSWNGUldWVFZNV2tSS1QyUkdXblZWYldoWVVteHZkMVV4Wkhka2JHOTNZa2hTV0dKWGFIQlZNRlV4WXpGT1dFNUlaRlJOVjJoVFdUQlNjbEJSUFQwPQ==